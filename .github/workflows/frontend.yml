name: Frontend CI

on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

jobs:
  ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22 #20? 

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Test (with coverage)
        run: npm run test:coverage

      ### SonarQube ###
      #- name: SonarQube Scan
      #  uses: SonarSource/sonarqube-scan-action@v4
      #  with:
      #    projectBaseDir: frontend
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      #- name: Quality Gate 
      #  uses: SonarSource/sonarqube-quality-gate-action@v1
      #  timeout-minutes: 5
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}

      ### Docker ###
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION_FILE="version.txt"

          # Lade existierende Version oder setze 0.0.0
          if [ -f "$VERSION_FILE" ]; then
            version=$(cat "$VERSION_FILE")
          else
            version="0.0.0"
          fi

          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)

          # Falls Commit-Message "release" enthält → minor +1, patch=0
          if [[ "${{ github.event.head_commit.message }}" == *"release"* ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo $new_version > "$VERSION_FILE"

          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.version.outputs.new_version }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.version.outputs.new_version }}